<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Secure Cloud Stack</title><link>/docs/tutorials/</link><description>Recent content in Tutorials on Secure Cloud Stack</description><generator>Hugo</generator><language>en</language><atom:link href="/docs/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Application Operations</title><link>/docs/tutorials/application-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorials/application-operation/</guid><description>&lt;p>Netic will do operations and management of Kubernetes as well as cluster wide components referred to
as technical operations and management. However, monitoring and reacting to events from the deployed
applications are not covered by this - this is referred to as application operations.&lt;/p>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>Application operations is basically setup following the below steps:&lt;/p>
&lt;ol>
&lt;li>Define incident scenarios which requires human interaction and write the standard operating procedures to be followed&lt;/li>
&lt;li>Identify and ensure metrics are available to detect the incident scenarios&lt;/li>
&lt;li>Develop alerting rules based on the metrics&lt;/li>
&lt;li>Handover alerting rules and standard operating procedures to Netic for verification and activation&lt;/li>
&lt;/ol>
&lt;p>Often new scenarios are discovered along the way extending the set of alerting rules over time.&lt;/p></description></item><item><title>Application Readiness</title><link>/docs/tutorials/application-readiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorials/application-readiness/</guid><description>&lt;p>Netic recommends for running workloads inside of Kubernetes some which is enforced by the
policies of the secure cloud stack and some which is best-practice running Kubernetes. These
recommendations are always valid but especially so if Netic is to provide &lt;a href="../application-operation/">application operations&lt;/a>.&lt;/p>
&lt;h2 id="security">Security&lt;/h2>
&lt;p>The containers must be able to run under the following security constraints also enforced by the pod and container
security context (see also &lt;a href="../../user/security-context/">Security Context&lt;/a>).&lt;/p>
&lt;ul>
&lt;li>Running without Linux capabilities&lt;/li>
&lt;li>Running as unprivileged&lt;/li>
&lt;li>Impossible to do privilege escalation&lt;/li>
&lt;/ul>
&lt;h2 id="stability">Stability&lt;/h2>
&lt;p>The following concerns the ability to run the an application stable on Kubernetes even when the cluster is undergoing
maintenance.&lt;/p></description></item><item><title>Application Observability</title><link>/docs/tutorials/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorials/observability/</guid><description>&lt;p>The secure cloud stack comes with a readymade observability setup to collect logs, metrics and traces and
gain insights into application health and performance. While the platform as such is polyglot and works
independt of specific programming languges, there are some recommendations with respect to development.&lt;/p>
&lt;h2 id="before-you-begin">Before you begin&lt;/h2>
&lt;p>This guide assumes some familarity with the concepts of cloud native observability, i.e., logs, metrics,
and traces as well as the chosen programming language.&lt;/p></description></item><item><title>Distroless Container Images</title><link>/docs/tutorials/distroless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tutorials/distroless/</guid><description>&lt;p>Usually source code is compiled and added as a new layer on some existing container base image. Some
programming languages require some interpreter to run like a Python interpreter or a virtual machine
running Java bytecode.&lt;/p>
&lt;p>It is convenient to use a base image populated with normal *nix tooling and maybe even based on a known
Linux distribution such as Ubuntu. This allows for easy debugging by executing commands inside of the
running container image. However this also expands the surface of attack both with respect to the number
of tools and service that might contain vulnerabilites but also the tools aviailable should someone be
able to execute arbitrary commands within the running conatiner.&lt;/p></description></item></channel></rss>